{"version":3,"sources":["components/AddCategoriy.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategoriy","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","c","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","console","log","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","image","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAe,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAETC,mBAAS,IAFA,mBAEtCC,EAFsC,KAE1BC,EAF0B,KAiB7C,OACI,0BAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAC,OAAKP,GAAL,mBAAoBO,OACnCN,EAAc,OAOd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAlBmB,SAACP,GAC5BF,EAAcE,EAAEQ,OAAOF,YCNlBG,EAAc,SAAC,GAAqB,EAApBC,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAEpC,OACI,yBAAKC,UAAU,0CACX,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,2BAAIA,K,uBCPHK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbN,EADa,iDACoCO,UAAUF,GAD9C,+DAEAG,MAAMR,GAFN,cAEbS,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAKc,EAAIC,OAAOC,iBAAiBhB,QAIzCiB,QAAQC,IAAIN,GAbO,kBAcZA,GAdY,4CAAH,sDC8BLO,EAzBC,SAAC,GAAkB,IAAhBd,EAAe,EAAfA,SAAe,ECFN,SAAEA,GAAe,IAAD,EACdrB,mBAAS,CAC/B2B,KAAO,GACPS,SAAU,IAH0B,mBACjCC,EADiC,KAC1BC,EAD0B,KAkBxC,OAZAC,qBAAU,WACNnB,EAAQC,GACHmB,MAAK,SAAAC,GACFC,YAAY,WACRJ,EAAS,CACLX,KAAOc,EACPL,SAAU,MAEf,UAEZ,CAACf,IAEGgB,EDf2BM,CAAatB,GAAlCU,EADiB,EACtBJ,KAAcS,EADQ,EACRA,QAEtB,OACI,oCACI,4BAAKf,GACHe,GAAW,uBAAGnB,UAAU,oCAAb,WACb,yBAAKA,UAAU,aAEPc,EAAOF,KAAI,SAAAe,GAAK,OACZ,kBAAC,EAAD,eACIC,IAAKD,EAAM9B,IACP8B,UEbnBE,EAAe,WAAO,IAAD,EAEM9C,mBAAS,CAAC,gBAFhB,mBAEvB+C,EAFuB,KAEXhD,EAFW,KAI9B,OACI,oCACI,4CACA,kBAAC,EAAD,CAAcA,cAAeA,IAC7B,6BAEA,4BAEQgD,EAAWlB,KAAI,SAACR,GACZ,OAAO,kBAAC,EAAD,CACKA,SAAUA,EACVwB,IAAKxB,UCdzC2B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.c397988b.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategoriy = ({setCategories}) => {\n\n    const [inputValue, setinputValue] = useState('');\n\n    const handleInputValueChange = (e) => {\n        setinputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if(inputValue.trim().length > 2){\n            setCategories(c => [inputValue, ...c]);\n            setinputValue('');\n        }\n        \n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={ handleInputValueChange }\n            />\n        </form>\n    )\n}\n\nAddCategoriy.propTypes = {\n    setCategories : PropTypes.func.isRequired\n}","import React from 'react'\n\nexport const GifGridItem = ({id, title, url}) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </div>\n    )\n}\n","export const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=pur1jAp1bOFh7zzIFHzuSRXSKqyX3Tfr`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        }\n    })\n\n    console.log(gifs);\n    return gifs;\n}","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { GifGridItem } from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nconst GifGrid = ({ category }) => {\n    const { data:images,  loading } = useFetchGifs(category);\n\n    return (\n        <>\n            <h3>{category}</h3>\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\n            <div className=\"card-grid\">\n                {\n                    images.map(image => (\n                        <GifGridItem\n                            key={image.id}\n                            {...image}\n                        />\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n\nGifGrid.propTypes = {\n\n}\n\nexport default GifGrid;\n\n","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = ( category ) => {\n    const [state, setState] = useState({\n        data : [],\n        loading : true\n    });\n\n    useEffect(() => {\n        getGifs(category)\n            .then(imgs => {\n                setTimeout( () => {\n                    setState({\n                        data : imgs,\n                        loading : false\n                    });\n                }, 3000)\n            });\n    }, [category])\n\n    return state;\n}\n","import React, { useState } from 'react'\nimport { AddCategoriy } from './components/AddCategoriy';\nimport GifGrid from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['Dragon Ball']);\n\n    return (\n        <>\n            <h1>GifExpertApp</h1>\n            <AddCategoriy setCategories={setCategories}/>\n            <hr />\n\n            <ol>\n                {\n                    categories.map((category) => {\n                        return <GifGrid\n                                    category={category} \n                                    key={category}\n                                />\n                    })\n                }\n            </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}